import { ColorFormat } from '../../types/model.types';
import { AlgorithmVersionConfiguration, VisionSimulationModeConfiguration } from '../../types/configuration.types';
import { Channel, ChannelWithAlpha, HexModel } from '../../types/color.types';

export default class Color {
    private render;
    private sourceColor;
    private lightness;
    private alpha;
    private hueShifting;
    private chromaShifting;
    private algorithmVersion;
    private visionSimulationMode;
    constructor({ render, sourceColor, lightness, alpha, hueShifting, chromaShifting, algorithmVersion, visionSimulationMode, }: {
        render?: 'HEX' | 'RGB';
        sourceColor?: Channel;
        lightness?: number;
        alpha?: number;
        hueShifting?: number;
        chromaShifting?: number;
        algorithmVersion?: AlgorithmVersionConfiguration;
        visionSimulationMode?: VisionSimulationModeConfiguration;
    });
    adjustHue: (hue: number) => number;
    adjustChroma: (chroma: number) => number;
    setColor: () => ColorFormat<typeof this.render>;
    setColorWithAlpha: () => ColorFormat<typeof this.render>;
    lch: () => ColorFormat<typeof this.render>;
    lcha: () => ColorFormat<typeof this.render>;
    oklch: () => ColorFormat<typeof this.render>;
    oklcha: () => ColorFormat<typeof this.render>;
    lab: () => ColorFormat<typeof this.render>;
    laba: () => ColorFormat<typeof this.render>;
    oklab: () => ColorFormat<typeof this.render>;
    oklaba: () => ColorFormat<typeof this.render>;
    hsl: () => ColorFormat<typeof this.render>;
    hsla: () => ColorFormat<typeof this.render>;
    hsluv: () => ColorFormat<typeof this.render>;
    hsluva: () => ColorFormat<typeof this.render>;
    getHsluv: () => Channel;
    simulateColorBlindHex: (color: Channel) => HexModel;
    simulateColorBlindRgb: (color: Channel) => Channel;
    mixColorsRgb: (colorA: ChannelWithAlpha, colorB: ChannelWithAlpha) => Channel;
    mixColorsHex: (colorA: HexModel, colorB: HexModel) => HexModel;
}
//# sourceMappingURL=color.d.ts.map