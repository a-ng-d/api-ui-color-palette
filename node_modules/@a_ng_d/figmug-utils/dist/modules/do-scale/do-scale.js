import M from "../do-map/do-map.js";
const S = (o, I, t, a = "LINEAR") => {
  let E = 1;
  const h = {};
  return o.map((A) => {
    h[A] = a !== "NONE" ? parseFloat(M(p(a, E), 0, 1, I, t).toFixed(1)) : A, E -= 1 / (o.length - 1), E < 0.01 && (E = 0);
  }), h;
}, p = (o, I) => {
  var a;
  const t = {
    LINEAR: (E) => E,
    EASEIN_SINE: (E) => Math.pow(E, 1.2),
    EASEOUT_SINE: (E) => 1 - Math.pow(1 - E, 1.2),
    EASEINOUT_SINE: (E) => E < 0.5 ? Math.pow(E * 2, 1.2) / 2 : 1 - Math.pow((1 - E) * 2, 1.2) / 2,
    EASEIN_QUAD: (E) => Math.pow(E, 1.5),
    EASEOUT_QUAD: (E) => 1 - Math.pow(1 - E, 1.5),
    EASEINOUT_QUAD: (E) => E < 0.5 ? Math.pow(E * 2, 1.5) / 2 : 1 - Math.pow((1 - E) * 2, 1.5) / 2,
    EASEIN_CUBIC: (E) => 1 - Math.cos(E * Math.PI / 2),
    EASEOUT_CUBIC: (E) => Math.sin(E * Math.PI / 2),
    EASEINOUT_CUBIC: (E) => -(Math.cos(Math.PI * E) - 1) / 2
  };
  return (a = t[o ?? "LINEAR"]) == null ? void 0 : a.call(t, I);
};
export {
  S as default
};
//# sourceMappingURL=do-scale.js.map
