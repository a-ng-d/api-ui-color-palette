var r = Object.defineProperty;
var o = (s, e, t) => e in s ? r(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t;
var a = (s, e, t) => o(s, typeof e != "symbol" ? e + "" : e, t);
class p {
  constructor(e) {
    a(this, "string");
    a(this, "doSnakeCase", () => this.string.toLowerCase().split(" ").join("_").replace(/[@/$^%#&!?,;:+=<>(){}"«»]/g, ""));
    a(this, "doPascalCase", () => this.string.charAt(0).toUpperCase() + this.string.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (e) => e.toUpperCase()).replace(/[@/$^%#&!?,;:+=<>(){}"«» ]/g, "").slice(1));
    a(this, "doKebabCase", () => this.string.toLowerCase().split(" ").join("-").replace(/[@/$^%#&!?,;:+=<>(){}"«»]/g, ""));
    a(this, "doCamelCase", () => this.string.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (e) => e.toUpperCase()).replace(/[@/$^%#&!?,;:+=<>(){}"«» ]/g, ""));
    this.string = e;
  }
}
export {
  p as default
};
//# sourceMappingURL=case.js.map
