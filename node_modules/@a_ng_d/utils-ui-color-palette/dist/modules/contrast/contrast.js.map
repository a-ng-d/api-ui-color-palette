{"version":3,"file":"contrast.js","sources":["../../../node_modules/apca-w3/src/apca-w3.js","../../../src/modules/contrast/contrast.ts"],"sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n/** @preserve\n/////    SAPC APCA - Advanced Perceptual Contrast Algorithm\n/////           Beta 0.1.9 W3 ‚Ä¢ contrast function only\n/////           DIST: W3 ‚Ä¢ Revision date: July 3, 2022\n/////    Function to parse color values and determine Lc contrast\n/////    Copyright ¬© 2019-2022 by Andrew Somers. All Rights Reserved.\n/////    LICENSE: W3 LICENSE\n/////    CONTACT: Please use the ISSUES or DISCUSSIONS tab at:\n/////    https://github.com/Myndex/SAPC-APCA/\n/////\n///////////////////////////////////////////////////////////////////////////////\n/////\n/////    MINIMAL IMPORTS:\n/////      import { APCAcontrast, sRGBtoY, displayP3toY,\n/////               calcAPCA, fontLookupAPCA } from 'apca-w3';\n/////      import { colorParsley } from 'colorparsley';\n/////\n/////    FORWARD CONTRAST USAGE:\n/////      Lc = APCAcontrast( sRGBtoY( TEXTcolor ) , sRGBtoY( BACKGNDcolor ) );\n/////    Where the colors are sent as an rgba array [255,255,255,1]\n/////\n/////    Retrieving an array of font sizes for the contrast:\n/////      fontArray = fontLookupAPCA(Lc);\n/////\n/////    Live Demonstrator at https://www.myndex.com/APCA/\n// */\n///////////////////////////////////////////////////////////////////////////////\n\n////////////////////////////////////////////////////////////////////////////////\n/////\n/////                  SAPC Method and APCA Algorithm\n/////   W3 Licensed Version: https://github.com/Myndex/apca-w3\n/////   GITHUB MAIN REPO: https://github.com/Myndex/SAPC-APCA\n/////   DEVELOPER SITE: https://git.myndex.com/\n/////\n/////   Acknowledgments and Thanks To:\n/////   ‚Ä¢ This project references the research & work of M.Fairchild, R.W.Hunt,\n/////     Drs. Bailey/Lovie-Kitchin, G.Legge, A.Arditi, M.Stone, C.Poynton, \n/////     L.Arend, M.Luo, E.Burns, R.Blackwell, P.Barton, M.Brettel, and many \n/////     others ‚Äî see refs at https://www.myndex.com/WEB/WCAG_CE17polarity\n/////   ‚Ä¢ Bruce Bailey of USAccessBoard for his encouragement, ideas, & feedback\n/////   ‚Ä¢ Chris Lilly of W3C for continued review, examination, & oversight\n/////   ‚Ä¢ Chris Loiselle of Oracle for getting us back on track in a pandemic\n/////   ‚Ä¢ The many volunteer test subjects for participating in the studies.\n/////   ‚Ä¢ The many early adopters, beta testers, and code/issue contributors\n/////   ‚Ä¢ Principal research conducted at Myndex by A.Somers.\n/////\n////////////////////////////////////////////////////////////////////////////////\n\n////////////////////////////////////////////////////////////////////////////////\n/////\n/////   *****  SAPC BLOCK  *****\n/////\n/////   For Evaluations, refer to this as: SAPC-8, 0.0.98G-series constant 4g\n/////            SAPC ‚Ä¢ S-LUV Advanced Predictive Color\n/////\n/////   SIMPLE VERSION ‚Äî Only the basic APCA contrast predictor.\n/////\n/////   Included Extensions & Model Features in this file:\n/////       ‚Ä¢ SAPC-8 Core Contrast (Base APCA, non-clinical use only) \n/////       ‚Ä¢ G series constants, group \"G-4g\" using a 2.4 monitor exponent\n/////       ‚Ä¢ sRGB to Y, parses numeric sRGB color to luminance\n/////       ‚Ä¢ SoftToe black level soft clamp and flare compensation.\n/////\n/////\n////////////////////////////////////////////////////////////////////////////////\n/////\n/////               DISCLAIMER AND LIMITATIONS OF USE\n/////     APCA is an embodiment of certain suprathreshold contrast\n/////     prediction technologies and it is licensed to the W3 on a\n/////     limited basis for use in certain specific accessibility\n/////     guidelines for web content only. APCA may be used for \n/////     predicting colors for web content use without royalty.\n/////\n/////     However, Any such license excludes other use cases\n/////     not related to web content. Prohibited uses include\n/////     medical, clinical evaluation, human safety related,\n/////     aerospace, transportation, military applications, \n/////     and uses which are not specific to web based content\n/////     presented on self-illuminated displays or devices.\n/////\n////////////////////////////////////////////////////////////////////////////////\n\n//////////   APCA 0.1.9  G 4g USAGE  ///////////////////////////////////////////\n///\n///  The API for \"APCA 0.1.9\" is trivially simple.\n///  Send text and background sRGB numeric values to the sRGBtoY() function,\n///  and send the resulting text-Y and background-Y to the APCAcontrast function\n///  it returns a signed float with the numeric Lc contrast result.\n///  \n///  The two inputs are TEXT color and BACKGROUND color in that order.\n///  Each must be a numeric NOT a string, as this simple version has\n///  no string parsing utilities. EXAMPLE:\n///  ________________________________________________________________________\n///\n///     txtColor = colorParsley(0x123456); // color of the text\n///     bgColor  = colorParsley(0xabcdef); // color for the background\n///\n///     contrastLc = APCAcontrast( sRGBtoY(txtColor) , sRGBtoY(bgColor) );\n///  ________________________________________________________________________\n///\n///                  **********   QUICK START   **********\n///\n///  Each color must be a 24bit color (8 bit per channel) as a single integer\n///  (or 0x) sRGB encoded color, i.e. White is either the integer 16777216 or\n///  the hex 0xffffff. A float is returned with a positive or negative value.\n///  Negative values mean light text and a dark background, positive values\n///  mean dark text and a light background. 60.0, or -60.0 is a contrast\n///  \"sort of like\" the old WCAG 2's 4.5:1. NOTE: the total range is now less\n///  than ¬± 110, so output can be rounded to a signed INT but DO NOT output\n///  an absolute value - light text on dark BG should return a negative number.\n///\n///     *****  IMPORTANT: Do Not Mix Up Text and Background inputs.  *****\n///     ****************   APCA is polarity sensitive!   *****************\n///  \n////////////////////////////////////////////////////////////////////////////////\n\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n/////    BEGIN APCA  0.1.9  BLOCK       \\/////////////////////////////////////\n////                                     \\///////////////////////////////////\n///                                       \\/////////////////////////////////\n//                                         \\///////////////////////////////\n\n\n/////  DEPENDENCIES  /////\n\n// The following imports are not needed for the main APCA function,\n// but are needed for the shortcut/alias calcAPCA(), and for the\n// future invertAPCA function, which examines hue.\n\n       ////  (add slash to line start for local test mode, remove before push)\n/*    ////  LOCAL TESTING SWITCH for using test.html\n    import{colorParsley}from'../node_modules/colorparsley/src/colorparsley.js';\n/*/   //// TOGGLE\n    import { colorParsley } from 'colorparsley';\n// */ //// END LOCAL TESTING SWITCH\n\n\n/////  Module Scope Object Containing Constants  /////\n/////   APCA   0.0.98G - 4g - W3 Compatible Constants\n\n/////  ùí¶ SA98G  ///////////////////////////////////\n    const SA98G = {\n\n        mainTRC: 2.4, // 2.4 exponent for emulating actual monitor perception\n\n            // For reverseAPCA\n        get mainTRCencode() { return 1 / this.mainTRC },\n\n              // sRGB coefficients\n        sRco: 0.2126729, \n        sGco: 0.7151522, \n        sBco: 0.0721750, \n\n              // G-4g constants for use with 2.4 exponent\n        normBG: 0.56, \n        normTXT: 0.57,\n        revTXT: 0.62,\n        revBG: 0.65,\n\n              // G-4g Clamps and Scalers\n        blkThrs: 0.022,\n        blkClmp: 1.414, \n        scaleBoW: 1.14,\n        scaleWoB: 1.14,\n        loBoWoffset: 0.027,\n        loWoBoffset: 0.027,\n        deltaYmin: 0.0005,\n        loClip: 0.1,\n\n          ///// MAGIC NUMBERS for UNCLAMP, for use with 0.022 & 1.414 /////\n         // Magic Numbers for reverseAPCA\n        mFactor: 1.94685544331710,\n        get mFactInv() { return 1 / this.mFactor},\n        mOffsetIn: 0.03873938165714010,\n        mExpAdj: 0.2833433964208690,\n        get mExp() { return this.mExpAdj / this.blkClmp},\n        mOffsetOut: 0.3128657958707580,\n      }\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n//////////  APCA CALCULATION FUNCTIONS \\/////////////////////////////////////\n\n//////////  ∆í  APCAcontrast()  ////////////////////////////////////////////\nexport function APCAcontrast (txtY,bgY,places = -1) {\n                 // send linear Y (luminance) for text and background.\n                // txtY and bgY must be between 0.0-1.0\n               // IMPORTANT: Do not swap, polarity is important.\n\n  const icp = [0.0,1.1];     // input range clamp / input error check\n\n  if(isNaN(txtY)||isNaN(bgY)||Math.min(txtY,bgY)<icp[0]||\n                              Math.max(txtY,bgY)>icp[1]){\n    return 0.0;  // return zero on error\n    // return 'error'; // optional string return for error\n  };\n\n//////////   SAPC LOCAL VARS   /////////////////////////////////////////\n\n  let SAPC = 0.0;            // For raw SAPC values\n  let outputContrast = 0.0; // For weighted final values\n  let polCat = 'BoW';      // Alternate Polarity Indicator. N normal R reverse\n\n  // TUTORIAL\n\n  // Use Y for text and BG, and soft clamp black,\n  // return 0 for very close luminances, determine\n  // polarity, and calculate SAPC raw contrast\n  // Then scale for easy to remember levels.\n\n  // Note that reverse contrast (white text on black)\n  // intentionally returns a negative number\n  // Proper polarity is important!\n\n//////////   BLACK SOFT CLAMP   ////////////////////////////////////////\n\n          // Soft clamps Y for either color if it is near black.\n  txtY = (txtY > SA98G.blkThrs) ? txtY :\n                         txtY + Math.pow(SA98G.blkThrs - txtY, SA98G.blkClmp);\n  bgY = (bgY > SA98G.blkThrs) ? bgY :\n                          bgY + Math.pow(SA98G.blkThrs - bgY, SA98G.blkClmp);\n\n       ///// Return 0 Early for extremely low ‚àÜY\n  if ( Math.abs(bgY - txtY) < SA98G.deltaYmin ) { return 0.0; }\n\n\n//////////   APCA/SAPC CONTRAST - LOW CLIP (W3 LICENSE)  ///////////////\n\n  if ( bgY > txtY ) {  // For normal polarity, black text on white (BoW)\n\n              // Calculate the SAPC contrast value and scale\n    SAPC = ( Math.pow(bgY, SA98G.normBG) - \n             Math.pow(txtY, SA98G.normTXT) ) * SA98G.scaleBoW;\n\n            // Low Contrast smooth rollout to prevent polarity reversal\n           // and also a low-clip for very low contrasts\n    outputContrast = (SAPC < SA98G.loClip) ? 0.0 : SAPC - SA98G.loBoWoffset;\n\n  } else {  // For reverse polarity, light text on dark (WoB)\n           // WoB should always return negative value.\n    polCat = 'WoB';\n\n    SAPC = ( Math.pow(bgY, SA98G.revBG) - \n             Math.pow(txtY, SA98G.revTXT) ) * SA98G.scaleWoB;\n\n    outputContrast = (SAPC > -SA98G.loClip) ? 0.0 : SAPC + SA98G.loWoBoffset;\n  }\n\n         // return Lc (lightness contrast) as a signed numeric value \n        // Round to the nearest whole number as string is optional.\n       // Rounded can be a signed INT as output will be within ¬± 127 \n      // places = -1 returns signed float, 1 or more set that many places\n     // 0 returns rounded string, uses BoW or WoB instead of minus sign\n\n  if(places < 0 ){  // Default (-1) number out, all others are strings\n    return  outputContrast * 100.0;\n  } else if(places == 0 ){\n    return  Math.round(Math.abs(outputContrast)*100.0)+'<sub>'+polCat+'</sub>';\n  } else if(Number.isInteger(places)){\n    return  (outputContrast * 100.0).toFixed(places);\n  } else { return 0.0 }\n\n} // End APCAcontrast()\n\n\n\n\n/*  SWITCH -- WORK IN PROGRESS DO NOT USE\n//////////  ∆í  invertAPCA()  //////////////////////////////////////////////////\nexport function invertAPCA (\n      {knownColor: [128,128,128], knownType: 'bg', targetCnst: 75,\n       returnAs: 'object', unknownType: 'txt', hueInvert: false,\n       hueRange: 5, preserveSat: false }) {\n\n  //if (Math.abs(targetCnst) < 15) { return false }; // abs contrast must be > 15\n\n  let knownY = sRGBtoY (knownColor);\n  let unknownY = knownY, knownExp, unknownExp;\n  let min,max,knownLs,isBG = true;\n\n\n  if (knownType == 'bg' || knownType == 'background') {\n    knownLs = Math.pow(knownY, );\n    black = APCAcontrast(0,knownY);\n    white = APCAcontrast(1,knownY);\n  } else if  (knownType == 'txt' || knownType == 'text') {\n    isBG = false;\n    black = APCAcontrast(knownY,0);\n    white = APCAcontrast(knownY,1);\n  } else { return false } // return false on error\n\n\n/////   APCA   0.0.98G - 4g - W3 Compatible Constants   ////////////////////\n\n  const scale = contrast > 0 ? SA98G.scaleBoW : SA98G.scaleWoB;\n  const offset = contrast > 0 ? SA98G.loBoWoffset : -SA98G.loWoBoffset;\n\n\n    targetCnst = ( parseFloat(targetCnst) * 0.01 + offset ) / scale;\n\n              // Soft clamps Y if it is near black.\n    knownY = (knownY > SA98G.blkThrs) ? knownY :\n              knownY + Math.pow(SA98G.blkThrs - knownY, SA98G.blkClmp);\n                                  \n       // set the known and unknown exponents\n    if (isBG) {\n        knownExp = targetCnst > 0 ? SA98G.normBG : SA98G.revBG;\n        unknownExp = targetCnst > 0 ? SA98G.normTXT : SA98G.revTXT;\n        unknownY = Math.pow( Math.pow(knownY,knownExp) - targetCnst, 1/unknownExp );\n        if (isNaN(unknownY)) return false;\n    } else if (!isBG) {\n        knownExp = targetCnst > 0 ? SA98G.normTXT : SA98G.revTXT;\n        unknownExp = targetCnst > 0 ? SA98G.normBG : SA98G.revBG;\n        unknownY = Math.pow(targetCnst + Math.pow(knownY,knownExp), 1/unknownExp );\n        if (isNaN(unknownY)) return false;\n    }\n\n    //return contrast +'----'+unknownY;\n\n    if (unknownY > 1.06 || unknownY < 0) { return false } // return false on overflow\n    // if (unknownY < 0) { return false } // return false on underflow\n    //unknownY = Math.max(unknownY,0.0);\n    \n                //  unclamp\n    unknownY = (unknownY > SA98G.blkThrs) ? unknownY : \n    (Math.pow(((unknownY + SA98G.mOffsetIn)m* SA98G.mFactor),\n                           SA98G.mExp) * SA98G.mFactInv) - SA98G.mOffsetOut;\n    \n//    unknownY - 0.22 * Math.pow(unknownY*0.5, 1/blkClmp);\n\n    unknownY = Math.max(Math.min(unknownY,1.0),0.0);\n\n    let testedCnst = (isBG) ? APCAcontrast(unknownY,knownY) : \n                              APCAcontrast(knownY,unknownY);\n\n  if (returnAs === 'object') {\n    let hexB = ( Math.round(Math.pow(unknownY,SA98G.mainTRCencode) * 255)\n                ).toString(16).padStart(2,'0');\n    hexB = '#' + hexB + hexB + hexB;\n    return  {color: hexB, Lc: testedCnst, whiteLc: white, blackLc: black};\n  } else if (returnAs === 'hex') {\n    let hexB = ( Math.round(Math.pow(unknownY,SA98G.mainTRCencode) * 255)\n                ).toString(16).padStart(2,'0');\n    return  '#' + hexB + hexB + hexB;\n  } else if (returnAs === 'array') {\n    let colorB = Math.round(Math.pow(unknownY,SA98G.mainTRCencode) * 255);\n    let retUse = (knownType == 'bg') ? 'txtColor' : 'bgColor'\n    return  [colorB,colorB,colorB,1,retUse];\n  } else if (returnAs === 'Y' || returnAs === 'y') {\n    return  Math.max(0.0,unknownY);\n  } else { return false } // return knownY on error\n}\n//  */  // END SWITCH\n\n\n\n\n//////////  ∆í  reverseAPCA() DEPRECATED SOON ///////////////////////////////\nexport function reverseAPCA (contrast = 0,knownY = 1.0,\n                             knownType = 'bg',returnAs = 'hex') {\n    \n  if (Math.abs(contrast) < 9) { return false }; // abs contrast must be > 9\n  \n  let unknownY = knownY, knownExp, unknownExp;\n  \n/////   APCA   0.0.98G - 4g - W3 Compatible Constants   ////////////////////\n\n  const scale = contrast > 0 ? SA98G.scaleBoW : SA98G.scaleWoB;\n  const offset = contrast > 0 ? SA98G.loBoWoffset : -SA98G.loWoBoffset;\n\n\n  contrast = ( parseFloat(contrast) * 0.01 + offset ) / scale;\n\n            // Soft clamps Y if it is near black.\n  knownY = (knownY > SA98G.blkThrs) ? knownY :\n            knownY + Math.pow(SA98G.blkThrs - knownY, SA98G.blkClmp);\n                                \n     // set the known and unknown exponents\n  if (knownType == 'bg' || knownType == 'background') {\n      knownExp = contrast > 0 ? SA98G.normBG : SA98G.revBG;\n      unknownExp = contrast > 0 ? SA98G.normTXT : SA98G.revTXT;\n      unknownY = Math.pow( Math.pow(knownY,knownExp) - contrast, 1/unknownExp );\n      if (isNaN(unknownY)) return false;\n  } else if (knownType == 'txt' || knownType == 'text') {\n      knownExp = contrast > 0 ? SA98G.normTXT : SA98G.revTXT;\n      unknownExp = contrast > 0 ? SA98G.normBG : SA98G.revBG;\n      unknownY = Math.pow(contrast + Math.pow(knownY,knownExp), 1/unknownExp );\n      if (isNaN(unknownY)) return false;\n  } else { return false } // return false on error\n\n  //return contrast +'----'+unknownY;\n\n  if (unknownY > 1.06 || unknownY < 0) { return false } // return false on overflow\n  // if (unknownY < 0) { return false } // return false on underflow\n  //unknownY = Math.max(unknownY,0.0);\n  \n              //  unclamp\n  unknownY = (unknownY > SA98G.blkThrs) ? unknownY : \n  (Math.pow(((unknownY + SA98G.mOffsetIn) * SA98G.mFactor),\n                         SA98G.mExp) * SA98G.mFactInv) - SA98G.mOffsetOut;\n  \n//    unknownY - 0.22 * Math.pow(unknownY*0.5, 1/blkClmp);\n\n  unknownY = Math.max(Math.min(unknownY,1.0),0.0);\n\n  if (returnAs === 'hex') {\n    let hexB = ( Math.round(Math.pow(unknownY,SA98G.mainTRCencode) * 255)\n                ).toString(16).padStart(2,'0');\n\n    return  '#' + hexB + hexB + hexB;\n  } else if (returnAs === 'color') {\n    let colorB = Math.round(Math.pow(unknownY,SA98G.mainTRCencode) * 255);\n    let retUse = (knownType == 'bg') ? 'txtColor' : 'bgColor'\n    return  [colorB,colorB,colorB,1,retUse];\n  } else if (returnAs === 'Y' || returnAs === 'y') {\n    return  Math.max(0.0,unknownY);\n  } else { return false } // return knownY on error\n}\n\n\n\n\n//////////  ∆í  calcAPCA()  /////////////////////////////////////////////\nexport function calcAPCA (textColor, bgColor, places = -1, round = true) {\n\n        // Note that this function requires colorParsley !!\n\tlet bgClr = colorParsley(bgColor);\n\tlet txClr = colorParsley(textColor);\n\tlet hasAlpha = (txClr[3] == '' || txClr[3] == 1) ? false : true ;\n\n\tif (hasAlpha) { txClr = alphaBlend( txClr, bgClr, round); };\n\n\treturn APCAcontrast( sRGBtoY(txClr), sRGBtoY(bgClr), places)\n} // End calcAPCA()\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n//////////  ∆í  fontLookupAPCA()  0.1.7 (G)  \\////////////////////////////////\n/////////                                    \\//////////////////////////////\n\nexport function fontLookupAPCA (contrast,places=2) {\n\n////////////////////////////////////////////////////////////////////////////\n/////  CONTRAST * FONT WEIGHT & SIZE  /////////////////////////////////////\n\n// Font size interpolations. Here the chart was re-ordered to put\n// the main contrast levels each on one line, instead of font size per line.\n// First column is LC value, then each following column is font size by weight\n\n// G G G G G G  Public Beta 0.1.7 (G) ‚Ä¢ MAY 28 2022\n\n// Lc values under 70 should have Lc 15 ADDED if used for body text\n// All font sizes are in px and reference font is Barlow\n\n// 999: prohibited - too low contrast\n// 777: NON TEXT at this minimum weight stroke\n// 666 - this is for spot text, not fluent-Things like copyright or placeholder.\n// 5xx - minimum font at this weight for content, 5xx % 500 for font-size\n// 4xx - minimum font at this weight for any purpose], 4xx % 400 for font-size\n\n// MAIN FONT SIZE LOOKUP\n\n//// ASCENDING SORTED  Public Beta 0.1.7 (G) ‚Ä¢ MAY 28 2022  ////\n\n//// Lc 45 * 0.2 = 9 which is the index for the row for Lc 45\n\n// MAIN FONT LOOKUP May 28 2022 EXPANDED\n// Sorted by Lc Value\n// First row is standard weights 100-900\n// First column is font size in px\n// All other values are the Lc contrast \n// 999 = too low. 777 = non-text and spot text only\n\n\nconst fontMatrixAscend = [\n    ['Lc',100,200,300,400,500,600,700,800,900],\n    [0,999,999,999,999,999,999,999,999,999],\n    [10,999,999,999,999,999,999,999,999,999],\n    [15,777,777,777,777,777,777,777,777,777],\n    [20,777,777,777,777,777,777,777,777,777],\n    [25,777,777,777,120,120,108,96,96,96],\n    [30,777,777,120,108,108,96,72,72,72],\n    [35,777,120,108,96,72,60,48,48,48],\n    [40,120,108,96,60,48,42,32,32,32],\n    [45,108,96,72,42,32,28,24,24,24],\n    [50,96,72,60,32,28,24,21,21,21],\n    [55,80,60,48,28,24,21,18,18,18],\n    [60,72,48,42,24,21,18,16,16,18],\n    [65,68,46,32,21.75,19,17,15,16,18],\n    [70,64,44,28,19.5,18,16,14.5,16,18],\n    [75,60,42,24,18,16,15,14,16,18],\n    [80,56,38.25,23,17.25,15.81,14.81,14,16,18],\n    [85,52,34.5,22,16.5,15.625,14.625,14,16,18],\n    [90,48,32,21,16,15.5,14.5,14,16,18],\n    [95,45,28,19.5,15.5,15,14,13.5,16,18],\n    [100,42,26.5,18.5,15,14.5,13.5,13,16,18],\n    [105,39,25,18,14.5,14,13,12,16,18],\n    [110,36,24,18,14,13,12,11,16,18],\n    [115,34.5,22.5,17.25,12.5,11.875,11.25,10.625,14.5,16.5],\n    [120,33,21,16.5,11,10.75,10.5,10.25,13,15],\n    [125,32,20,16,10,10,10,10,12,14],\n    ];\n\n\n// ASCENDING SORTED  Public Beta 0.1.7 (G) ‚Ä¢ MAY 28 2022 ////\n\n// DELTA - MAIN FONT LOOKUP May 28 2022 EXPANDED\n// EXPANDED  Sorted by Lc Value ‚Ä¢‚Ä¢  DELTA\n// The pre-calculated deltas of the above array\n\nconst fontDeltaAscend = [\n    ['‚àÜLc',100,200,300,400,500,600,700,800,900],\n    [0,0,0,0,0,0,0,0,0,0],\n    [10,0,0,0,0,0,0,0,0,0],\n    [15,0,0,0,0,0,0,0,0,0],\n    [20,0,0,0,0,0,0,0,0,0],\n    [25,0,0,0,12,12,12,24,24,24],\n    [30,0,0,12,12,36,36,24,24,24],\n    [35,0,12,12,36,24,18,16,16,16],\n    [40,12,12,24,18,16,14,8,8,8],\n    [45,12,24,12,10,4,4,3,3,3],\n    [50,16,12,12,4,4,3,3,3,3],\n    [55,8,12,6,4,3,3,2,2,0],\n    [60,4,2,10,2.25,2,1,1,0,0],\n    [65,4,2,4,2.25,1,1,0.5,0,0],\n    [70,4,2,4,1.5,2,1,0.5,0,0],\n    [75,4,3.75,1,0.75,0.188,0.188,0,0,0],\n    [80,4,3.75,1,0.75,0.188,0.188,0,0,0],\n    [85,4,2.5,1,0.5,0.125,0.125,0,0,0],\n    [90,3,4,1.5,0.5,0.5,0.5,0.5,0,0],\n    [95,3,1.5,1,0.5,0.5,0.5,0.5,0,0],\n    [100,3,1.5,0.5,0.5,0.5,0.5,1,0,0],\n    [105,3,1,0,0.5,1,1,1,0,0],\n    [110,1.5,1.5,0.75,1.5,1.125,0.75,0.375,1.5,1.5],\n    [115,1.5,1.5,0.75,1.5,1.125,0.75,0.375,1.5,1.5],\n    [120,1,1,0.5,1,0.75,0.5,0.25,1,1],\n    [125,0,0,0,0,0,0,0,0,0],\n    ];\n\n  // APCA CONTRAST FONT LOOKUP TABLES\n  // Copyright ¬© 2022 by Myndex Research and Andrew Somers. All Rights Reserved\n  // Public Beta 0.1.7 (G) ‚Ä¢ MAY 28 2022\n  // For the following arrays, the Y axis is contrastArrayLen\n  // The two x axis are weightArrayLen and scoreArrayLen\n\n  // MAY 28 2022\n\n  const weightArray = [0,100,200,300,400,500,600,700,800,900];\n  const weightArrayLen = weightArray.length; // X axis\n\n  let returnArray = [contrast.toFixed(places),0,0,0,0,0,0,0,0,0,];\n  const returnArrayLen = returnArray.length; // X axis\n\n\n  const contrastArrayAscend = ['lc',0,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,];\n  const contrastArrayLenAsc = contrastArrayAscend.length; // Y azis\n\n//// Lc 45 * 0.2 = 9, and 9 is the index for the row for Lc 45\n\n  let tempFont = 777;\n  contrast = Math.abs(contrast); // Polarity unneeded for LUT\n  const factor = 0.2; // 1/5 as LUT is in increments of 5\n  const index = (contrast == 0) ?\n                 1 : (contrast * factor) | 0 ; // LUT row... n|0 is bw floor\n  let w = 0; \n    // scoreAdj interpolates the needed font side per the Lc\n  let scoreAdj = (contrast - fontMatrixAscend[index][w]) * factor;\n\n  w++; // determines column in font matrix LUT\n\n\n/////////  Font and Score Interpolation  \\/////////////////////////////////\n\n// populate returnArray with interpolated values\n\n  for (; w < weightArrayLen; w++) {\n\n    tempFont = fontMatrixAscend[index][w]; \n\n    if (tempFont > 400) { // declares a specific minimum for the weight.\n        returnArray[w] = tempFont;\n    } else if (contrast < 14.5 ) {\n        returnArray[w] = 999; //  999 = do not use for anything\n    } else if (contrast < 29.5 ) {\n        returnArray[w] = 777; // 777 =  non-text only\n    } else {\n                // INTERPOLATION OF FONT SIZE\n               // sets level for 0.5px size increments of smaller fonts\n              // Note bitwise (n|0) instead of floor\n      (tempFont > 24) ?\n        returnArray[w] =\n            Math.round(tempFont - (fontDeltaAscend[index][w] * scoreAdj)) :\n        returnArray[w] =\n            tempFont - ((2.0 * fontDeltaAscend[index][w] * scoreAdj) | 0) * 0.5;\n                                                      // (n|0) is bitwise floor\n    }\n  }\n/////////  End Interpolation  ////////////////////////////////////////////\n\n  return returnArray\n} // end fontLookupAPCA\n\n/////////\\                                      ///////////////////////////\\\n//////////\\  END  fontLookupAPCA()  0.1.7 (G)  /////////////////////////////\\\n/////////////////////////////////////////////////////////////////////////////\\\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n//////////  LUMINANCE CONVERTERS  |//////////////////////////////////////////\n\n\n//////////  ∆í  sRGBtoY()  //////////////////////////////////////////////////\nexport function sRGBtoY (rgb = [0,0,0]) { // send sRGB 8bpc (0xFFFFFF) or string\n\n// NOTE: Currently expects 0-255\n\n/////   APCA   0.0.98G - 4g - W3 Compatible Constants   ////////////////////\n/*\nconst mainTRC = 2.4; // 2.4 exponent emulates actual monitor perception\n    \nconst sRco = 0.2126729, \n      sGco = 0.7151522, \n      sBco = 0.0721750; // sRGB coefficients\n      */\n// Future:\n// 0.2126478133913640\t0.7151791475336150\t0.0721730390750208\n// Derived from:\n// xW\tyW\tK\txR\tyR\txG\tyG\txB\tyB\n// 0.312720\t0.329030\t6504\t0.640\t0.330\t0.300\t0.600\t0.150\t0.060\n\n         // linearize r, g, or b then apply coefficients\n        // and sum then return the resulting luminance\n\n  function simpleExp (chan) { return Math.pow(chan/255.0, SA98G.mainTRC); };\n\n  return SA98G.sRco * simpleExp(rgb[0]) +\n         SA98G.sGco * simpleExp(rgb[1]) +\n         SA98G.sBco * simpleExp(rgb[2]);\n         \n} // End sRGBtoY()\n\n\n\n\n//////////  ∆í  displayP3toY()  /////////////////////////////////////////////\nexport function displayP3toY (rgb = [0,0,0]) { // send rgba array\n\n// NOTE: Currently Apple has the tuple as 0.0 to 1.0, NOT 255\n\n/////   APCA   0.0.98G - 4g - W3 Compatible Constants   ////////////////////\n\nconst mainTRC = 2.4; // 2.4 exponent emulates actual monitor perception\n                    // Pending evaluation, because, Apple...\n    \nconst sRco = 0.2289829594805780, \n      sGco = 0.6917492625852380, \n      sBco = 0.0792677779341829; // displayP3 coefficients\n\n// Derived from:\n// xW\tyW\tK\txR\tyR\txG\tyG\txB\tyB\n// 0.312720\t0.329030\t6504\t0.680\t0.320\t0.265\t0.690\t0.150\t0.060\n\n         // linearize r, g, or b then apply coefficients\n        // and sum then return the resulting luminance\n\n  function simpleExp (chan) { return Math.pow(chan, mainTRC); };\n\n  return sRco * simpleExp(rgb[0]) +\n         sGco * simpleExp(rgb[1]) +\n         sBco * simpleExp(rgb[2]);\n\n} // End displayP3toY()\n\n\n\n\n//////////  ∆í  adobeRGBtoY()  /////////////////////////////////////////////\nexport function adobeRGBtoY (rgb = [0,0,0]) { // send rgba array\n\n// NOTE: Currently expects 0-255\n\n/////   APCA   0.0.98G - 4g - W3 Compatible Constants   ////////////////////\n\nconst mainTRC = 2.35; // 2.35 exponent emulates actual monitor perception\n                     // Pending evaluation...\n    \nconst sRco = 0.2973550227113810, \n      sGco = 0.6273727497145280, \n      sBco = 0.0752722275740913; // adobeRGB coefficients\n\n// Derived from:\n// xW\tyW\tK\txR\tyR\txG\tyG\txB\tyB\n// 0.312720\t0.329030\t6504\t0.640\t0.330\t0.210\t0.710\t0.150\t0.060\n\n         // linearize r, g, or b then apply coefficients\n        // and sum then return the resulting luminance\n\n  function simpleExp (chan) { return Math.pow(chan/255.0, mainTRC); };\n\n  return sRco * simpleExp(rgb[0]) +\n         sGco * simpleExp(rgb[1]) +\n         sBco * simpleExp(rgb[2]);\n\n} // End displayP3toY()\n\n\n\n\n////////////////////////////////////////////////////////////////////////////\n//////////  UTILITIES  \\///////////////////////////////////////////////////\n\n\n//////////  ∆í  alphaBlend()  /////////////////////////////////////////////\n\n                      // send rgba array for text/icon, rgb for background.\n                     // Only foreground allows alpha of 0.0 to 1.0 \n                    // This blends using gamma encoded space (standard)\n                   // rounded 0-255 or set round=false for number 0.0-255.0\nexport function alphaBlend (rgbaFG=[0,0,0,1.0], rgbBG=[0,0,0], round = true ) {\n\t\n\trgbaFG[3] = Math.max(Math.min(rgbaFG[3], 1.0), 0.0); // clamp alpha 0-1\n\tlet compBlend = 1.0 - rgbaFG[3];\n\tlet rgbOut = [0,0,0,1,true]; // or just use rgbBG to retain other elements?\n\t\n\tfor (let i=0;i<3;i++) {\n\t\trgbOut[i] = rgbBG[i] * compBlend + rgbaFG[i] * rgbaFG[3];\n\t\tif (round) rgbOut[i] = Math.min(Math.round(rgbOut[i]),255);\n\t};\n  return rgbOut;\n} // End alphaBlend()\n\n\n\n\n//\\                                     ////////////////////////////////////////\n///\\                                   ////////////////////////////////////////\n////\\                                 ////////////////////////////////////////\n/////\\  END APCA 0.1.9  G-4g  BLOCK  ////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n","import chroma from 'chroma-js'\nimport { APCAcontrast, fontLookupAPCA, sRGBtoY } from 'apca-w3'\nimport { Channel, HexModel, RgbModel } from '@tps/color.types'\n\nexport default class Contrast {\n  private backgroundColor: Channel\n  private textColor: HexModel\n\n  constructor({\n    backgroundColor = [0, 0, 0],\n    textColor = '#FFFFFF',\n  }: {\n    backgroundColor?: Channel\n    textColor?: HexModel\n  }) {\n    this.backgroundColor = backgroundColor\n    this.textColor = textColor\n  }\n\n  getWCAGContrast = (): number => {\n    return chroma.contrast(chroma(this.backgroundColor).hex(), this.textColor)\n  }\n\n  getAPCAContrast = (): number => {\n    return Math.abs(\n      APCAcontrast(\n        sRGBtoY(chroma(this.textColor).rgb()),\n        sRGBtoY(this.backgroundColor)\n      ) as number\n    )\n  }\n\n  getWCAGScore = (): 'A' | 'AA' | 'AAA' => {\n    return this.getWCAGContrast() < 4.5\n      ? 'A'\n      : this.getWCAGContrast() >= 4.5 && this.getWCAGContrast() < 7\n        ? 'AA'\n        : 'AAA'\n  }\n\n  getWCAGScoreColor = (): RgbModel => {\n    if (this.getWCAGScore() !== 'A')\n      return {\n        r: 0.5294117647,\n        g: 0.8156862745,\n        b: 0.6941176471,\n      }\n    else\n      return {\n        r: 0.8274509804,\n        g: 0.7019607843,\n        b: 0.7803921569,\n      }\n  }\n\n  getAPCAScoreColor = (): RgbModel => {\n    if (this.getRecommendedUsage() !== 'AVOID')\n      return {\n        r: 0.5294117647,\n        g: 0.8156862745,\n        b: 0.6941176471,\n      }\n    else\n      return {\n        r: 0.8274509804,\n        g: 0.7019607843,\n        b: 0.7803921569,\n      }\n  }\n\n  getMinFontSizes = (): Array<string | number> => {\n    return fontLookupAPCA(this.getAPCAContrast())\n  }\n\n  getRecommendedUsage = ():\n    | 'UNKNOWN'\n    | 'AVOID'\n    | 'NON_TEXT'\n    | 'SPOT_TEXT'\n    | 'HEADLINES'\n    | 'BODY_TEXT'\n    | 'CONTENT_TEXT'\n    | 'FLUENT_TEXT' => {\n    if (this.getAPCAContrast() >= 90) return 'FLUENT_TEXT'\n    if (this.getAPCAContrast() >= 75 && this.getAPCAContrast() < 90)\n      return 'CONTENT_TEXT'\n    if (this.getAPCAContrast() >= 60 && this.getAPCAContrast() < 75)\n      return 'BODY_TEXT'\n    if (this.getAPCAContrast() >= 45 && this.getAPCAContrast() < 60)\n      return 'HEADLINES'\n    if (this.getAPCAContrast() >= 30 && this.getAPCAContrast() < 45)\n      return 'SPOT_TEXT'\n    if (this.getAPCAContrast() >= 15 && this.getAPCAContrast() < 30)\n      return 'NON_TEXT'\n    if (this.getAPCAContrast() < 15) return 'AVOID'\n\n    return 'UNKNOWN'\n  }\n\n  getContrastRatioForLightness = (lightness: number): number => {\n    const bgColor = chroma.lch(lightness, 0, 0).rgb()\n    return chroma.contrast(chroma(bgColor).hex(), this.textColor)\n  }\n\n  getLightnessForContrastRatio = (\n    targetRatio: number,\n    precision = 0.1\n  ): number => {\n    const isLightText = chroma(this.textColor).luminance() > 0.5\n    let min = 0\n    let max = 100\n    let currentLightness = isLightText ? 20 : 80\n\n    while (max - min > precision) {\n      currentLightness = (min + max) / 2\n      const currentRatio = this.getContrastRatioForLightness(currentLightness)\n\n      if (isLightText)\n        if (currentRatio < targetRatio) max = currentLightness\n        else min = currentLightness\n      else if (currentRatio < targetRatio) min = currentLightness\n      else max = currentLightness\n    }\n\n    return currentLightness\n  }\n}\n"],"names":["SA98G","APCAcontrast","txtY","bgY","places","icp","SAPC","outputContrast","polCat","fontLookupAPCA","contrast","fontMatrixAscend","fontDeltaAscend","weightArrayLen","returnArray","tempFont","factor","index","w","scoreAdj","sRGBtoY","rgb","simpleExp","chan","Contrast","backgroundColor","textColor","__publicField","chroma","lightness","bgColor","targetRatio","precision","isLightText","min","max","currentLightness","currentRatio"],"mappings":"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","x_google_ignoreList":[0]}