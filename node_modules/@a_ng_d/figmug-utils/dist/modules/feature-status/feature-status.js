var r = Object.defineProperty;
var u = (i, e, t) => e in i ? r(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;
var s = (i, e, t) => u(i, typeof e != "symbol" ? e + "" : e, t);
class a {
  constructor(e) {
    s(this, "features");
    s(this, "featureName");
    s(this, "planStatus");
    s(this, "suggestion");
    s(this, "result");
    s(this, "limit");
    this.features = e.features, this.featureName = e.featureName, this.planStatus = e.planStatus, this.suggestion = e.suggestion, this.result = this.getFeature(), this.limit = this.result === void 0 ? 42 : this.result.limit;
  }
  getFeature() {
    return this.features.find((e) => e.name === this.featureName);
  }
  isActive() {
    return this.result === void 0 ? !0 : this.result.isActive;
  }
  isPro() {
    return this.result === void 0 ? !1 : this.result.isPro;
  }
  isNew() {
    return this.result === void 0 ? !1 : this.result.isNew;
  }
  isBlocked() {
    const e = this.result;
    return e !== void 0 ? e.isPro && this.planStatus === "PAID" || !e.isPro && this.planStatus === "PAID" ? !1 : !(!e.isPro && this.planStatus === "UNPAID") : !0;
  }
  isReached(e) {
    const t = this.result;
    return t !== void 0 && t.limit !== void 0 ? t.isPro && this.planStatus === "UNPAID" ? e >= t.limit : !1 : !(t !== void 0 && t.limit === void 0);
  }
  isAvailableAndBlocked() {
    return this.isBlocked() ? null : this.suggestion;
  }
}
export {
  a as default
};
//# sourceMappingURL=feature-status.js.map
